1. 
I first wrote a C program using random number to produce input file. 
Then I changed the number of iteration in for statement to control the line number.

then I compiled sfrob and sfrobu.

and then I run 
time ./sfrob 'ab' 'xx' < input.txt 
time ./sfrobu 'ab' 'xx' < input.txt 

sfrob for 1000 lines:
real	0m0.005s
user	0m0.002s
sys		0m0.001s

sfrobu for 1000 lines:
real	0m0.060s
user	0m0.003s
sys		0m0.062s

sfrob for 10000 lines:
real	0m0.027s
user	0m0.023s
sys		0m0.003s

sfrobu for 10000 lines:
real	0m0.502s
user	0m0.021s
sys		0m0.524s
 
sfrob for 100000 lines:
real	0m0.312s
user	0m0.243s
sys		0m0.013s

sfrobu for 100000 lines:
real	0m5.050s
user	0m0.214s
sys		0m5.124s


2. Performance Analysis of the shell version

file: 511.6 KB
a. sfrobu
time ./sfrobu < input.txt > output_u
Comparisons: 131135

real	0m0.511s
user	0m0.018s
sys		0m0.611s

b. sfrob
$ time ./sfrob < input.txt > output_b

real	0m0.036s
user	0m0.023s
sys		0m0.000s

c. shell script 
$ time ./sfrobs < input.txt > output_s

real	0m0.023s
user	0m0.008s
sys		0m0.007s


file: 5 MB
a. sfrobu
time ./sfrobu < input.txt > output_u
Comparisons: 216812

real	0m7.121s
user	0m0.122s
sys		0m6.219s

b. sfrob
$ time ./sfrob < input.txt > output_b

real	0m0.292s
user	0m0.213s
sys		0m0.011s

c. shell script
$ time ./sfrobs < input.txt > output_sfrobs

real	0m0.099s
user	0m0.018s
sys		0m0.024s


We can easily see that the shell script uses least time. 



